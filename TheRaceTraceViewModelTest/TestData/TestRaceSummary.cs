// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using QuickType;
//
//    var raceSummarry = RaceSummarry.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603


using System.Text.Json;
using System.Text.Json.Serialization;

public partial class TestRaceSummary
{
    [JsonPropertyName("Season")]
    public int Season { get; set; }

    [JsonPropertyName("Round")]
    public int Round { get; set; }

    [JsonPropertyName("RaceName")]
    public string RaceName { get; set; }

    [JsonPropertyName("Date")]
    public string Date { get; set; }

    [JsonPropertyName("DriverLapTimes")]
    public TestDriverLapTime[] DriverLapTimes { get; set; }
}

public partial class TestDriverLapTime
{
    [JsonPropertyName("Id")]
    public string Id { get; set; }

    [JsonPropertyName("Driver")]
    public Driver Driver { get; set; }

    [JsonPropertyName("LapTimes")]
    public TestLapTime[] LapTimes { get; set; }
}

public partial class TestLapTime
{
    [JsonPropertyName("LapNumber")]
    public int LapNumber { get; set; }

    [JsonPropertyName("DriverId")]
    public string DriverId { get; set; }

    [JsonPropertyName("Position")]
    public int Position { get; set; }

    [JsonPropertyName("Time")]
    public double Time { get; set; }
}



internal class ParseStringConverter : JsonConverter<int>
{
    public override bool CanConvert(Type t) => t == typeof(int);

    public override int Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        var value = reader.GetString();
        if (int.TryParse(value, out int l))
        {
            return l;
        }
        throw new Exception("Cannot unmarshal type int");
    }

    public override void Write(Utf8JsonWriter writer, int value, JsonSerializerOptions options)
    {
        JsonSerializer.Serialize(writer, value.ToString(), options);
        return;
    }

    public static readonly ParseStringConverter Singleton = new ParseStringConverter();
}

#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
